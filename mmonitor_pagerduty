#!/usr/bin/env python

import logging
import logging.handlers
import smtplib
import sys
import time
import traceback
import urllib2

FROM_ADDR = 'mmonitor@corp.mixpanel.com'
TO_ADDR = 'integration-test@mixpanel2.pagerduty.com'

log_filepath = './mmonitor_pagerduty.log'
max_filesize_bytes = 1024*1024*10
logger = logging.getLogger('MMonitor.PagerDuty')
logger.setLevel(logging.INFO)

log_rotater = logging.handlers.RotatingFileHandler(log_filepath, maxBytes=max_filesize_bytes, backupCount=10)

formatter = logging.Formatter('%(asctime)s - %(levelname)-7s - %(name)s - %(message)s')
log_rotater.setFormatter(formatter)

logger.addHandler(log_rotater)

def check_if_sites_down():
    # simply pings www.mixpanel.com and api.mixpanel.com
    # if not 200, kicks off pagerduty incident via email

    logger.info('starting to check sites')
    check_site('http://mixpanel.com')
    check_site('http://api.mixpanel.com')
    logger.info('done checking sites.')

def check_site(url):
    logger.info('checking site [%s]' % url)
    try:
        resp = urllib2.urlopen(url, data=None, timeout=30) # seconds
        resp_code = resp.getcode()
        if resp_code != 200:
            send_pagerduty_email(url, resp.msg)
        else:
            logger.warn('site [%s] is possibly down, code [%d]. will send PagerDuty email.' % (url, resp_code))
            logger.info('site [%s] is ok' % url)
    except Exception as ex:
        # todo: make retries
        logger.exception('exception occurred when testing site [%s]. will send PagerDuty email.' % url)
        tb = traceback.format_exc()
        send_pagerduty_email(url, '%s\n%s' % (str(ex), tb))

# do not throw, since called from exception handling blocks
def send_pagerduty_email(url, body):
    try:
        msg = format_pagerduty_email(FROM_ADDR, TO_ADDR, url, body)
        smtp = smtplib.SMTP('localhost', 25, timeout=30) # also seconds

        try:
            smtp.ehlo_or_helo_if_needed()
            smtp.sendmail(FROM_ADDR, TO_ADDR, msg)
            logger.info('successfully sent PagerDuty email for site [%s]' % url)
        except:
            logger.exception('exception occurred when trying to send PagerDuty email for site [%s].' % url)
        finally:
            smtp.close()
    except:
        logger.exception('exception occurred when trying to acquire SMTP connection')

def format_pagerduty_email(from_addr, to_addr, url, body):
    gmt = time.gmtime()

    # divide into 15 minute chunks so that PagerDuty can de-dup
    adjusted_minutes = (gmt.tm_min / 15) * 15 # discard remainder
    time_str = time.strftime('%Y_%m_%d %H:'+str(adjusted_minutes).zfill(2), gmt)

    subject = 'site [%s] is possibly down around [%s UTC]' % (url, time_str)
    msg = 'From: %s\nTo: %s\nSubject: %s\n%s\n' % (from_addr, to_addr, subject, body,)
    return msg

if __name__ == '__main__':
    nargs = len(sys.argv)
    if nargs > 1 and sys.argv[1] == 'test':
        # quick test in lieu of proper unit tests
        check_site('http://www.sdfghgkfagdfgaf.com')
    else:
        # normal usage
        check_if_sites_down()
